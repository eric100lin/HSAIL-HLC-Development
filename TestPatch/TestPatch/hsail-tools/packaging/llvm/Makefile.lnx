




LNX_MAIN_NAME = LIBLLVM.a


BUILD_DIR:=../build/$(TARGET)

OBJ_DIR1 := $(BUILD_DIR)/OBJS1
OBJ_DIR2 := $(BUILD_DIR)/OBJS2

MAIN := $(BUILD_DIR)/$(LNX_MAIN_NAME)

SRCS1 := $(wildcard ./Object/*.cpp)  
SRCS2 := $(wildcard ./Support/*.cpp) 

PURE_SRCS1 := $(notdir $(SRCS1)) 
PURE_SRCS2 := $(notdir $(SRCS2)) 

OBJS1 := $(addprefix $(OBJ_DIR1)/,$(PURE_SRCS1:.cpp=.o))
OBJS2 := $(addprefix $(OBJ_DIR2)/,$(PURE_SRCS2:.cpp=.o))


VPATH = Object Support

INCLUDES  = -I.. -I. 

LNX_CC_DEFINES = -DLINUX -DUNIX_OS -DqLittleEndian -D WITH_ONLINE_COMPILER -D ATI_OS_LINUX   -D ATI_COMP_GCC

ifeq ("$(ARCH)","x64")
ARCH_CFLAGS = -m64    -D__x86_64__ -D__AMD64__ -D ATI_ARCH_X86 -D ATI_BITS_64 -D ATI_ENDIAN_LITTLE -D LITTLEENDIAN_CPU
else
ARCH_CFLAGS = -m32    -D__i386__               -D ATI_ARCH_X86 -D ATI_BITS_32 -D ATI_ENDIAN_LITTLE -D LITTLEENDIAN_CPU -march=i686 -msse2
endif

ifeq ("$(FLAVOUR)","DEBUG")
FLAVOUR_FLAGS= -ggdb -D_DEBUG
else
FLAVOUR_FLAGS=       -D_NDEBUG
endif

LNX_COMMON_CFLAGS =  -D__STDC_LIMIT_MACROS -D__STDC_CONSTANT_MACROS -Wall -Wno-unused -Werror  -fPIC -pipe  -fmerge-all-constants -fno-tree-vectorize 
CFLAGS = $(LNX_COMMON_CFLAGS) $(ARCH_CFLAGS) $(FLAVOUR_FLAGS) $(LNX_CC_DEFINES)

LNX_PREBUILD_LIBS =  
LNX_SYSTEM_LIBS = -lstdc++ -lpthread -ldl -lm $(ARCH_CFLAGS)
LNX_DISABLE_LD_WARNINGS =
LNX_LDFLAGS  = $(ARCH_CFLAGS) 


LNX_CC = g++
LNX_AR = ar

all: $(MAIN)


$(MAIN): $(OBJS1) $(OBJS2)
	echo Packing into $(MAIN_NAME) ...
	$(LNX_AR)  -r $@ $(OBJS1) $(OBJS2)


$(OBJ_DIR1)/%.o : ./Object/%.cpp $(OBJ_DIR1)
	echo "$< -> $@"  
	$(LNX_CC) $(CFLAGS) $(INCLUDES) -o $@ -c $<

$(OBJ_DIR2)/%.o : ./Support/%.cpp  $(OBJ_DIR2) 
	echo "$< -> $@"  
	$(LNX_CC) $(CFLAGS) $(INCLUDES) -o $@ -c $<


$(OBJ_DIR1): 
	mkdir -p $@

$(OBJ_DIR2): 
	mkdir -p $@

.PHONY: clean all

clean: 
	rm -rf $(OBJ_DIR1) $(OBJ_DIR2) $(MAIN)


